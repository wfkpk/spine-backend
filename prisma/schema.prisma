generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Genre {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  books       Book[]
  EditRequest EditRequest[]
}

model Book {
  id            String        @id @default(uuid())
  title         String
  description   Bytes?
  imageUrl      String?
  bookUrl       String?
  bookTitleBare String
  numPages      Int?
  avgRating     String?
  ratingsCount  Int
  kcrPreviewUrl String?
  goodReadsId   String        @unique
  genres        Genre[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  author        Author        @relation(fields: [authorId], references: [id])
  authorId      String
  comment       Comment[]
  Record        Record[]
  Notes         Notes[]
  EditRequest   EditRequest[]

  @@index([authorId])
}

model Author {
  id          String   @id @default(uuid())
  goodReadsId Int      @unique
  name        String?
  profileUrl  String?
  createdAt   DateTime @default(now())
  books       Book[]
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  @@index([userId])
  @@index([bookId])
}

model Record {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  status    BookRecordStatus @default(WANT_TO_READ)
  progress  Int              @default(0)
  rating    Int?

  user   User   @relation(fields: [userId], references: [id])
  userId String
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  @@index([userId])
  @@index([bookId])
}

model Notes {
  id        String   @id @default(uuid())
  notes     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String

  @@index([userId])
  @@index([bookId])
}

model User {
  id           String   @id @default(cuid())
  name         String   @default("Spine User")
  email        String?  @unique
  username     String   @unique @default(cuid())
  firebaseUid  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  mailVerified Boolean? @default(false)
  bio          String?
  userRole     UserRole @default(USER)
  avatar       String?  @default("https://i.imgur.com/6VBx3io.png")

  karma       Karma?
  EditRequest EditRequest[]
  comment     Comment[]
  Record      Record[]
  Notes       Notes[]
}

model Karma {
  id        String   @id @default(uuid())
  karma     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@index([userId])
}

model EditRequest {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  status          EditRequestStatus @default(PENDING)
  bookName        String
  bookDescription Bytes
  authorName      String
  genre           Genre[]
  book            Book              @relation(fields: [bookId], references: [id])
  bookId          String
  user            User              @relation(fields: [userId], references: [id])
  userId          String

  @@index([userId])
  @@index([bookId])
}

enum EditRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookRecordStatus {
  READ
  CURRENTLY_READING
  WANT_TO_READ
}

enum UserRole {
  ADMIN
  MOD
  USER
}
